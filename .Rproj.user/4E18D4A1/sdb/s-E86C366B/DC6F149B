{
    "collab_server" : "",
    "contents" : "\n# This is the server logic for a Shiny web application.\n# You can find out more about building applications with Shiny here:\n#\n# http://shiny.rstudio.com\n#\n\nlibrary(shiny)\nlibrary(ggplot2)\nlibrary(gridExtra)\nlibrary(grid)\nlibrary(gridExtra)\nlibrary(ggplot2)\nlibrary(hexbin)\nlibrary(knitr)\nlibrary(dplyr)\ncourt <- readRDS(\"court.rds\")\nshotDatafDef2016 <- readRDS(\"shotDatafDef2016.rds\")\nshotDataTotal2016 <- readRDS(\"shotDataTotal2016.rds\")\nShotComparisonGraph <- function(OffTeam, DefTown, SeasondataOff, SeasonDataDef, nbins = 30, maxsize = 7, quant = 0.7) {\n  #Filter the offensive data of the Offensive Team\n  Off <- filter(SeasondataOff, TEAM_NAME == OffTeam)\n  #Filter the Deffensive data of the Defensive team\n  deff <- SeasonDataDef[names(SeasonDataDef) == DefTown][[1]]\n  #Get the maximum and minumum values for x and y\n  xbnds <- range(c(SeasondataOff$LOC_X, deff$LOC_X))\n  ybnds <- range(c(SeasondataOff$LOC_Y, deff$LOC_Y))\n  #Make hexbin dataframes out of the teams\n  makeHexData <- function(df) {\n    h <- hexbin(df$LOC_X, df$LOC_Y, nbins, xbnds = xbnds, ybnds = ybnds, IDs = TRUE)\n    data.frame(hcell2xy(h),\n               PPS = tapply(as.numeric(as.character(df$SHOT_MADE_FLAG))*ifelse(tolower(df$SHOT_TYPE) == \"3pt field goal\", 3, 2), h@cID, FUN = function(z) sum(z)/length(z)),\n               ST = tapply(df$SHOT_MADE_FLAG, h@cID, FUN = function(z) length(z)),\n               cid = h@cell)\n  }\n  ##Total NBA data\n  Totalhex <- makeHexData(SeasondataOff)\n  ##Defensive team data\n  Defhex <- makeHexData(deff)\n  ##Offensive team data\n  Offhex <- makeHexData(Off)\n  #Merge offensive and deffensive data with total data by Cell id\n  DeffbyCell <- merge(Totalhex, Defhex, by = \"cid\", all = T)\n  OffByCell <- merge(Totalhex, Offhex, by = \"cid\", all = T)\n  ##  when calculating the difference empty cells should count as 0\n  DeffbyCell$PPS.x[is.na(DeffbyCell$PPS.x)] <- 0\n  DeffbyCell$PPS.y[is.na(DeffbyCell$PPS.y)] <- 0\n  DeffbyCell$ST.y[is.na(DeffbyCell$ST.y)] <- 0\n  \n  OffByCell$PPS.x[is.na(OffByCell$PPS.x)] <- 0\n  OffByCell$PPS.y[is.na(OffByCell$PPS.y)] <- 0\n  OffByCell$ST.y[is.na(OffByCell$ST.y)] <- 0\n  #  make a \"difference\" data.frame\n  DiffDeff <- data.frame(x = ifelse(is.na(DeffbyCell$x.x), DeffbyCell$x.y, DeffbyCell$x.x),\n                         y = ifelse(is.na(DeffbyCell$y.x), DeffbyCell$y.y, DeffbyCell$y.x),\n                         PPS= DeffbyCell$PPS.y - DeffbyCell$PPS.x,\n                         cid= DeffbyCell$cid, \n                         ST = DeffbyCell$ST.y)\n  \n  DiffOff <- data.frame(x = ifelse(is.na(OffByCell$x.x), OffByCell$x.y, OffByCell$x.x),\n                        y = ifelse(is.na(OffByCell$y.x), OffByCell$y.y, OffByCell$y.x),\n                        PPS= OffByCell$PPS.y - OffByCell$PPS.x,\n                        ST = OffByCell$ST.x,\n                        cid = OffByCell$cid, \n                        ST = OffByCell$ST.y)\n  #make team comparisons\n  Comparison <- merge(DiffOff, DiffDeff, by = \"cid\", all = T) \n  Comparison <- Comparison[,-c(6:7)]\n  Comparison$Diff <- c(Comparison$PPS.x + Comparison$PPS.y)\n  \n  \n  PPSAA <- weighted.mean((Comparison$PPS.x + Comparison$PPS.y), Comparison$ST.x)\n  \n  #Legend extractor\n  g_legend <- function(a.gplot){\n    tmp <- ggplot_gtable(ggplot_build(a.gplot))\n    leg <- which(sapply(tmp$grobs, function(x) x$name) == \"guide-box\")\n    legend <- tmp$grobs[[leg]]\n    return(legend)}\n  \n  OFFLEG <- ggplot(DiffOff) + annotation_custom(court, -250, 250, -52, 418) + geom_point(aes(x = x, y = y, color = PPS, size = ST), stat = \"identity\") +\n    coord_fixed()  +theme(line = element_blank(),\n                          axis.title.x = element_blank(),\n                          axis.title.y = element_blank(),\n                          axis.text.x = element_blank(),\n                          axis.text.y = element_blank(),\n                          legend.title = element_blank(),\n                          plot.title = element_text(size = 17, lineheight = 1.2, face = \"bold\"))+ scale_size(range = c(0, maxsize)) +scale_color_gradient2(low = \"blue\", high = \"red\", name = \"APPS\") + ylim(c(-51, 400))+ theme(legend.position=\"bottom\") +  ggtitle(paste(OffTeam, \"Offensive\\n Shot Chart\", sep = \" \"))\n  leg<-g_legend(OFFLEG)\n  \n  DiffOff <- filter(DiffOff, ST > quantile(DiffOff$ST, probs = quant))\n  DiffDeff <- filter(DiffDeff, ST > quantile(DiffDeff$ST, probs = quant))\n  Comparison <- filter(Comparison, ST.x > quantile(Comparison$ST.x, probs = quant))\n  \n  \n  \n  OFF <- ggplot(DiffOff) + annotation_custom(court, -250, 250, -52, 418) + geom_point(aes(x = x, y = y, color = PPS, size = ST), stat = \"identity\") +\n    coord_fixed()  +theme(line = element_blank(),\n                          axis.title.x = element_blank(),\n                          axis.title.y = element_blank(),\n                          axis.text.x = element_blank(),\n                          axis.text.y = element_blank(),\n                          legend.title = element_blank(),\n                          plot.title = element_text(size = 17, lineheight = 1.2, face = \"bold\"))+ scale_size(range = c(0, maxsize)) + scale_color_gradient2(low = \"blue\", high = \"red\", name = \"APPS\") + ylim(c(-51, 400))+ theme(legend.position=\"none\") +  ggtitle(paste(OffTeam, \"Offensive\\n Shot Chart\", sep = \" \"))\n  DEF <- ggplot(DiffDeff)  + annotation_custom(court, -250, 250, -52, 418) + geom_point(aes(x = x, y = y, color = PPS, size = ST), stat = \"identity\") +\n    coord_fixed()  +theme(line = element_blank(),\n                          axis.title.x = element_blank(),\n                          axis.title.y = element_blank(),\n                          axis.text.x = element_blank(),\n                          axis.text.y = element_blank(),\n                          legend.title = element_blank(),\n                          plot.title = element_text(size = 17, lineheight = 1.2, face = \"bold\"))+ scale_size(range = c(0, maxsize)) + scale_color_gradient2(low = \"blue\", high = \"red\", name = \"APPS\") + ylim(c(-51, 400))+ theme(legend.position=\"none\") + ggtitle(paste(DefTown, \"defensive\\n Shot Chart\", sep = \" \"))\n  \n  COMP <- ggplot(Comparison) + annotation_custom(court, -250, 250, -52, 418) + geom_point(aes(x = x.x, y = y.x, color = Diff, size = ST.x), stat = \"identity\") +\n    coord_fixed()  +theme(line = element_blank(),\n                          axis.title.x = element_blank(),\n                          axis.title.y = element_blank(),\n                          axis.text.x = element_blank(),\n                          axis.text.y = element_blank(),\n                          legend.title = element_blank(),\n                          plot.title = element_text(size = 17, lineheight = 1.2, face = \"bold\"))+ scale_size(range = c(0, maxsize)) + scale_color_gradient2(low = \"blue\", high = \"red\", name = \"APPS\") + ylim(c(-51, 400))+ theme(legend.position=\"none\") + ggtitle(\"Comparison\\n Shot Chart\")\n  charts <- arrangeGrob(DEF,OFF, COMP, ncol = 3)\n  p <- grid.arrange(arrangeGrob(arrangeGrob(DEF,OFF, COMP, ncol = 3),leg,ncol=1,heights=c(7/8,1/8)))\n  \n  return(list(Off = DiffOff, deff = DiffDeff, Comparison = Comparison, Total = Totalhex, PPSAA = PPSAA, p = p, leg = leg, charts = charts))\n}\n######\nPPS <- function(OffTeam, DefTown, SeasondataOff, SeasonDataDef, nbins = 30) {\n  #Filter the offensive data of the Offensive Team\n  Off <- filter(SeasondataOff, TEAM_NAME == OffTeam)\n  #Filter the Deffensive data of the Defensive team\n  deff <- SeasonDataDef[names(SeasonDataDef) == DefTown][[1]]\n  #Get the maximum and minumum values for x and y\n  xbnds <- range(c(SeasondataOff$LOC_X, deff$LOC_X))\n  ybnds <- range(c(SeasondataOff$LOC_Y, deff$LOC_Y))\n  #Make hexbin dataframes out of the teams\n  makeHexData <- function(df) {\n    h <- hexbin(df$LOC_X, df$LOC_Y, nbins, xbnds = xbnds, ybnds = ybnds, IDs = TRUE)\n    data.frame(hcell2xy(h),\n               PPS = tapply(as.numeric(as.character(df$SHOT_MADE_FLAG))*ifelse(tolower(df$SHOT_TYPE) == \"3pt field goal\", 3, 2), h@cID, FUN = function(z) sum(z)/length(z)),\n               ST = tapply(df$SHOT_MADE_FLAG, h@cID, FUN = function(z) length(z)),\n               cid = h@cell)\n  }\n  ##Total NBA data\n  Totalhex <- makeHexData(SeasondataOff)\n  ##Defensive team data\n  Defhex <- makeHexData(deff)\n  ##Offensive team data\n  Offhex <- makeHexData(Off)\n  #Merge offensive and deffensive data with total data by Cell id\n  DeffbyCell <- merge(Totalhex, Defhex, by = \"cid\", all = T)\n  OffByCell <- merge(Totalhex, Offhex, by = \"cid\", all = T)\n  ##  when calculating the difference empty cells should count as 0\n  DeffbyCell$PPS.x[is.na(DeffbyCell$PPS.x)] <- 0\n  DeffbyCell$PPS.y[is.na(DeffbyCell$PPS.y)] <- 0\n  DeffbyCell$ST.y[is.na(DeffbyCell$ST.y)] <- 0\n  \n  OffByCell$PPS.x[is.na(OffByCell$PPS.x)] <- 0\n  OffByCell$PPS.y[is.na(OffByCell$PPS.y)] <- 0\n  OffByCell$ST.y[is.na(OffByCell$ST.y)] <- 0\n  #  make a \"difference\" data.frame\n  DiffDeff <- data.frame(x = ifelse(is.na(DeffbyCell$x.x), DeffbyCell$x.y, DeffbyCell$x.x),\n                         y = ifelse(is.na(DeffbyCell$y.x), DeffbyCell$y.y, DeffbyCell$y.x),\n                         PPS= DeffbyCell$PPS.y - DeffbyCell$PPS.x,\n                         cid= DeffbyCell$cid, \n                         ST = DeffbyCell$ST.y)\n  \n  DiffOff <- data.frame(x = ifelse(is.na(OffByCell$x.x), OffByCell$x.y, OffByCell$x.x),\n                        y = ifelse(is.na(OffByCell$y.x), OffByCell$y.y, OffByCell$y.x),\n                        PPS= OffByCell$PPS.y - OffByCell$PPS.x,\n                        ST = OffByCell$ST.x,\n                        cid = OffByCell$cid, \n                        ST = OffByCell$ST.y)\n  #make team comparisons\n  Comparison <- merge(DiffOff, DiffDeff, by = \"cid\", all = T) \n  Comparison <- Comparison[,-c(6:7)]\n  Comparison$Diff <- c(Comparison$PPS.x + Comparison$PPS.y)\n  \n  \n  PPSAA <- weighted.mean((Comparison$PPS.x + Comparison$PPS.y), Comparison$ST.x)\n  \n  return(PPSAA)\n}\n######\nshinyServer(function(input, output) {\n  \n  output$distPlot <- renderPlot({\n    \n    Com1 <- ShotComparisonGraph(OffTeam = input$Home, DefTown = input$Visitor, SeasondataOff = shotDataTotal2016, SeasonDataDef = shotDatafDef2016, nbins = 30, quant = input$quant)\n    Com2 <- ShotComparisonGraph(OffTeam = input$Visitor, DefTown = input$Home, SeasondataOff = shotDataTotal2016, SeasonDataDef = shotDatafDef2016, nbins = 30, quant = input$quant)\n    \n    grid.arrange(Com1$charts,Com2$charts,Com1$leg,ncol=1,heights=c(3/7, 3/7 ,1/7))\n    \n    \n  })\n  \n  output$offAPPS <- renderText({\n    Off <- round(PPS(OffTeam = input$Home, DefTown = input$Visitor, SeasondataOff = shotDataTotal2016, SeasonDataDef = shotDatafDef2016, nbins = 30), digits = 3)\n    paste(\"The Points over Average per shot scored by\", input$Home, \"against\", input$Visitor, \"is\" , Off)\n  })\n  \n  output$defAPPS <- renderText({\n    def <- round(PPS(OffTeam = input$Visitor, DefTown = input$Home, SeasondataOff = shotDataTotal2016, SeasonDataDef = shotDatafDef2016, nbins = 30), digits = 3)\n    paste(\"The Points over Average per shot scored by\", input$Visitor, \"against\", input$Home, \"is\" , def)\n  })\n  \n  output$downloadPlot <- downloadHandler(\n    filename = function() { paste(\"ShotCharts\", '.png', sep='') },\n    content = function(file) {\n      png(file, width = 1500, height = 1500, res = 300)\n      Com1 <- ShotComparisonGraph(OffTeam = input$Home, DefTown = input$Visitor, SeasondataOff = shotDataTotal2016, SeasonDataDef = shotDatafDef2016, nbins = 30, quant = input$quant)\n      Com2 <- ShotComparisonGraph(OffTeam = input$Visitor, DefTown = input$Home, SeasondataOff = shotDataTotal2016, SeasonDataDef = shotDatafDef2016, nbins = 30, quant = input$quant)\n      grid.arrange(Com1$charts,Com2$charts,Com1$leg,ncol=1,heights=c(3/7, 3/7 ,1/7))\n      dev.off()\n    })\n  \n})",
    "created" : 1474897396234.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "19563302",
    "id" : "DC6F149B",
    "lastKnownWriteTime" : 1474906828,
    "last_content_update" : 1474906828242,
    "path" : "~/ShotCharts/server.R",
    "project_path" : "server.R",
    "properties" : {
    },
    "relative_order" : 2,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}